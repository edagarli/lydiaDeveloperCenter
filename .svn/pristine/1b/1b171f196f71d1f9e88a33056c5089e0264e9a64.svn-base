package com.lydia.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.lydia.util.Constant;
import com.lydia.util.MongoDBUtil;
import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;

public class DeveloperRegister extends HttpServlet
{

	private static final long serialVersionUID = 1L;
	private static final String DEVELOPER = "developers";
	/**
	 * Constructor of the object.
	 */
	public DeveloperRegister()
	{
		super();
	}

	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy()
	{
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	/**
	 * The doGet method of the servlet. <br>
	 * 
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request
	 *            the request send by the client to the server
	 * @param response
	 *            the response send by the server to the client
	 * @throws ServletException
	 *             if an error occurred
	 * @throws IOException
	 *             if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException
	{

		doPost(request, response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 * 
	 * This method is called when a form has its tag value method equals to
	 * post.
	 * 
	 * @param request
	 *            the request send by the client to the server
	 * @param response
	 *            the response send by the server to the client
	 * @throws ServletException
	 *             if an error occurred
	 * @throws IOException
	 *             if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException
	{
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		DBCollection userCollection = MongoDBUtil.getTestCollection(DEVELOPER);
		DBObject queryByName = new BasicDBObject();
		queryByName.put("email", request.getParameter("email"));
		DBObject findByUsername = userCollection.findOne(queryByName);
		if (findByUsername == null)
		{
			try
			{
				DBObject developer = new BasicDBObject();
				developer.put("email", request.getParameter("email"));
				developer.put("password", request.getParameter("password"));
		    //	developer.put("name", request.getParameter("name"));
			//	developer.put("website", request.getParameter("website"));
			//	developer.put("date", new Date());
				userCollection.save(developer);
			}
			catch (Exception e)
			{
				e.getMessage();
				out.println("{\"status\":" + Constant.RESULT_PARAM_INVALID
						+ ",\"devid\":\"\"}");
				return;
			}
			DBObject deve = userCollection.findOne(queryByName);
			out.println("{\"status\":" + Constant.RESULT_SUCCESS
					+ ",\"devid\":\"" + deve.get("_id") + "\"}");
		}
		else
		{
			out.println("{\"status\":" + Constant.RESULT_INTERNAL_ERROR
					+ ",\"devid\":\"\"}");
		}
	}

	/**
	 * Initialization of the servlet. <br>
	 * 
	 * @throws ServletException
	 *             if an error occurs
	 */
	public void init() throws ServletException
	{
		// Put your code here
	}

}
